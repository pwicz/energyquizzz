package server;

import commons.Activity;
import commons.ClientMessage;
import commons.Game;
import commons.Player;
import commons.Question;
import commons.ServerMessage;
import org.springframework.messaging.MessagingException;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import server.api.ActivityController;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

@Controller
@RequestMapping("/")
public class MainMessageController {

    private SimpMessagingTemplate simpMessagingTemplate;
    private ActivityController activityController;
    private HashMap<String, Game> games;

    public MainMessageController(SimpMessagingTemplate simpMessagingTemplate, ActivityController activityController) {
        this.simpMessagingTemplate = simpMessagingTemplate;
        this.activityController = activityController;

        games = new HashMap<>();
    }

    @MessageMapping("/general")
    public void handleClientMessages(ClientMessage msg){
        try{
            switch(msg.type){
                case INIT_MULTIPLAYER:
                    // do something
                    break;
                case INIT_SINGLEPLAYER:
                    // first init the game
                    var initMsg = initSingleplayerGame(msg);
                    if(initMsg != null){
                        simpMessagingTemplate.convertAndSend("/topic/client/" + msg.playerID, initMsg);
                        // then send a first question
                        simpMessagingTemplate.convertAndSend("/topic/client/" + msg.playerID,
                                nextQuestion(initMsg.score, games.get(initMsg.gameID)));
                    }
                    break;
                case SUBMIT_SINGLEPLAYER:
                    if(msg.gameID == null || msg.playerID == null) return;

                    // check if specified game and player exist
                    Game g = games.get(msg.gameID);
                    if(g == null) return;
                    Player p = g.getPlayerWithID(msg.playerID);
                    if(p == null || p.hasAnswered()) return;


                    p.setHasAnswered(true);
                    submitSingleplayer(msg, g, p);
                    break;
                case QUIT:
                    playerGameCorrectnessCheck(msg.gameID, msg.playerID);

                    // remove player from the game
                    Game game = games.get(msg.gameID);
                    game.getPlayers().remove(game.getPlayerWithID(msg.playerID));
                    // end game if there are no more players
                    if(game.getPlayers().size() == 0) endGame(game);

                    break;
                case TEST:
                    // for testing purposes
                    simpMessagingTemplate.convertAndSend("/topic/client/" + msg.playerID,
                            new ServerMessage(ServerMessage.Type.TEST));
                    break;
                default:
                    // unknown message
            }
        }
        catch(MessagingException ex){
            System.out.println("MessagingException on handleClientMessages: " + ex.getMessage());
        }
    }

    private boolean playerGameCorrectnessCheck(String gameID, String playerID){
        if(gameID == null || playerID == null) return false;

        // check if specified game and player exist

        if(!games.containsKey(gameID)) return false;
        Player p = games.get(gameID).getPlayerWithID(playerID);
        return p != null && !p.hasAnswered();
    }

    private ServerMessage initSingleplayerGame(ClientMessage msg){
        // 0. Check if player name is correct
        if(msg.playerName == null || msg.playerName.isEmpty()){
            // TODO: send error message
            return null;
        }

        // 1. Create a new game
        Game g = new Game(new ArrayList<>(), UUID.randomUUID().toString());
        g.addPlayer(new Player(msg.playerName, msg.playerID));
        games.put(g.getID(), g);

        // 2. Return a message with the first Question, gameID and an initial score
        ServerMessage result = new ServerMessage(ServerMessage.Type.NEW_SINGLEPLAYER_GAME);
        result.score = 0;
        result.gameID = g.getID();

        return result;
    }

    private ServerMessage nextQuestion(int playerScore, Game forGame){
        ServerMessage result = new ServerMessage(ServerMessage.Type.NEXT_QUESTION);
        // TODO: Question class should be generated by a proper method
        List<Activity> selectedActivities =
                List.of(activityController.getRandom().getBody(),
                        activityController.getRandom().getBody(),
                        activityController.getRandom().getBody());
        result.question = new Question(selectedActivities, Question.Type.COMPARE);
        // TEMPORARY SOLUTION
        Activity max = selectedActivities.get(0);
        for(int i = 1; i < selectedActivities.size(); ++i){
            Activity activity = selectedActivities.get(i);
            if(activity.consumptionInWh > max.consumptionInWh) max = activity;
        }

        // save the correct answer in the Game object

        forGame.setCorrectAnswerID(max.id);

        result.score = playerScore;
        result.timerFull = 10.0; // 10 seconds
        result.timerFraction = 1.0;
        result.round = forGame.getRound();

        return result;
    }

    private void submitSingleplayer(ClientMessage msg, Game g, Player p){
        // update player's score
        int scoreForQuestion = 0;
        if(Objects.equals(msg.chosenActivity, g.getCorrectAnswerID())){
            scoreForQuestion = 100 + (int)(100 * msg.time);
        }
        p.setScore(p.getScore() + scoreForQuestion);
        // send score msg
        // send the correct answer id and the picked answer id
        ServerMessage m = new ServerMessage(ServerMessage.Type.RESULT);
        m.correctAnswerID = g.getCorrectAnswerID();
        m.pickedAnswerID = msg.chosenActivity;
        m.score = p.getScore();
        simpMessagingTemplate.convertAndSend("/topic/client/" + msg.playerID, m);

        if(g.getRound() < 5){
            // send next question after 3 seconds
            new Timer().schedule(new TimerTask() {
                @Override
                public void run() {
                    if(g.hasEnded()) return;

                    g.setRound(g.getRound() + 1);
                    simpMessagingTemplate.convertAndSend("/topic/client/" + msg.playerID,
                            nextQuestion(p.getScore(), g));
                    p.setHasAnswered(false);
                }
            }, 3000);
        }
        else{
            // end game
            endGame(g);
            // send player to the leaderboard
            new Timer().schedule(new TimerTask() {
                @Override
                public void run() {
                    simpMessagingTemplate.convertAndSend("/topic/client/" + msg.playerID,
                            new ServerMessage(ServerMessage.Type.END));
                }
            }, 3000);
        }

    }

    private void endGame(Game g){
        g.setHasEnded(true);
        games.remove(g.getID());
    }
}
